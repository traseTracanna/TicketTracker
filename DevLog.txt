*** Ticket Tracker Project Devlog ***

1/3/23:
    Started the project today. Spent about 90 minutes or so outlining the scope of the project and some semblance of a todo list on how to make the project.

    My plan is to start with the front end first and then do backend. 

    Ultimately my goal for this project is to be as fully fleshed out as it can be in a reasonable amount of time and to have it deployed.

    After making the project outline, this may be a pretty big project that will take me some time, but inexperience makes it hard for me to guage exactly how long that will be.
        Another layer of complexity to this is that I would like to try to implement some new technology that i'm only vaguely familiar with like OAuth and MVC.

        I'm hopeful that by doing a decent amount of planning ahead of time, and by tracking my progress in this devlog that I will be able to complete it. 
    
    All this being said, my hope is to have this project finished by end-of-day 1/22/23.
        This is something like 20 full days i think? 
            Assuming it will be a project that takes 100 hours, that's 5 hours of work per day every day. 

        I think it's unrealistic to think I will actually work on this every single day, as i usually take weekends off from coding, but I'm thinking as the
        deadline approaches i will increase my average daily hours of work. 
            But as for now, 5 hours per day every weekday is acceptably manageable. 

        I also think it's important for me to keep in mind that for my faux-store app, frontend took significantly longer than backend.
            This is likely attributable to it being longer since i worked with front end stuff, but i have a feeling that puzzling out functionality of this app on the frontend
            will take longer than getting it to all connect to the db and server. 
                That being said, I should ensure that I allow myself a generous amount of time to work on the backend at the end of this project, and keep in mind that I will also need
                to figure out finalized design work, optimization, api documentation, and deployment -- all things I haven't interfaced with very much.

        More than anything else, it's important to keep in mind during this project not to despair if i'm not meeting my timeline benchmarks.
            If i fall into this bad habit it will likely demotivate me to actually work on this which will only exasperate the issue.

    Finally, my goals for tomorrow are:
        1) Have some outlines of how each page of the app will look in order to direct development 
        2) Create the frontend file architecture, taking into account redux slices and react components. 
    If I can accomplish these tasks tomorrow, on 1/5 I should be able to start actually writing code.


1/4/23:
    Just finished all of the basic page layouts to help me determine what the file architecture of the app will look like. 
        Next I need to actually do that work -- figure out what the react components and redux slices are going to be and how to organize them. 
        I feel compelled to do some reading on the purpose of each of those things though before i dive right in so i'm not making things redundant while leaving other things out.
        It would help to define what a react component and redux slice is I suppose to help me determine which thing is which on the webpage, and maybe help to make more generic
        types of each that can more easily be recycled throughout the code like the way pages are listed for tickets/projects or the way comments and assigned users are displayed.
        
        On top of all that I feel like I should brush up on MVC right away as well to make sure the way i'm designing my frontend won't screw me over later as i try to connect
        the backend through mvc.

    I didn't do as much today as I could have, and my future self will probably lament me for that,
        But i basically just spent time trying to understand the react-redux library. I've got most of a grasp on it, but will likely have to take more notes tomorrow as found in
        UnderstandingNewTech.txt 
        I will also have to take a look at the MVC stuff tomorrow as well, and finally figure out how to best use redux slices and react components to organize my program.
        It's probably best I continue to take my time with the actual setup of this project instead of getting antsy and rushing into things so that development goes as smoothly
        as possible. 
    
    The good news is I at least took the time to wire frame all pages of my app which will help guide me in my file architecture tomorrow.

    My goals for tomorrow are:
        1) Fully understand the react-redux toolkit to the best of my ability
        2) Understand how MVC will work within my system
        3) Outline the react components and redux slices in relation to the functions of my program.
        4) Create the project files i think i'll need. 


1/5/2023:
    I've done more research this morning about the functions of MVC and redux and have decided that because of the way MVC increases complexity of structure for the sake of 
    simplifying changing the way a particular system within an application works over time, that it may not best suit my needs for this project and cause more of a headache than
    what it's worth to try and implement right now. I feel that the MVC system is good to keep in mind for if I were ever working on a project with a team of people, but these
    independent solo projects are probably not the right time to try to throw it in. 
        This is somewhat of a relief as it means there's one less thing I have to tackle during my development of this project. 

    One other thing that is coming to me today is that this will likely take longer than I expect. My goal is to have this project done by EOD 1/22, but at the rate i'm starting off here'
    I don't exactly have high hopes that this is a realistic expectation. Regardless I will still try to push to finish this as fast as I can manage and try to prevent dispairing if that
    takes longer than i'm hoping for, but I think i'm already feeling kind of burnt out on this whole project. 
        Hopefully these feelings of doubt will subside a bit once I actually get the project rolling. It's been a slow start and I think it's mostly cause i'm nervous about where
        I'm going to start, and being worried about having my project structured in a way I will come to regret later. The key may be to just develop a plan, and stick to it
        for as long as it can work, and then just get hacky from there.

    Next on the docket for today is trying to framework the react and redux pieces of the puzzle and how they will fit together.

    I think i've made some solid progress so far on defining the state of the application through the components that each page will need. 
    This project definitely feels complex, but I still think it is manageable.
    One thing that has come to mind, however, is I feel i may need to go ahead and create the structure of the database right away to help when I work on front end.
    I just want to make sure that as i'm developing front-end features, I include spaces in the code where server calls are going to be so that I don't accidentally update the 
    store instance without updating data in the db 
        For instance, if i add a new user to a project, I need to make sure to update both the project's info and the user's info in the db. This can be done in one server call,
        but i think it's important for me to mark out where this happens in the code so i don't end up missing something a few weeks from now.


1/6/23:
    Again, I haven't really gotten around to much today as I am still intimidated about the architecture of this project and the efficiency of doing it well. 
    I created the react app with redux support or whatever, and have started making all the folders and files i think will be necessary for this project.
    The two pieces I've continued to avoid however are
        1) login -- mostly because it seems like something that won't matter right off the gate of getting this thing to function,
            but also because i don't really know how Oauth and cookies work so i'm puting it off for now
        2) Users -- mostly because i don't really know how i'm going to handle user continuity after login, and because i'm not convinced my outlining on having both an
            allUsers slice and a thisUser slice to be the best way to do it. 
    Other than that, the architecture does still feel a bit messy, but I think i just have to commit, send it, accept that i'm going to make some mistakes here and aim to learn from
    them after the fact. 
        I could always refactor later, but I know that the messier the web of hacky code gets, the more daunting this will be further down the line. So maybe for now i just say fuckit
        and focus on making a working product without worrying too much about this mysterious 'perfect way' of doing it that I don't know of or haven't thought of yet.
        To at least be fair to myself, the organization I've done over the past 4 days of this project will help me monumentally compared to when i made the ecommerce full stack app,
        where I went in with basically no plan and still somehow got something together in 3 weeks. 
            This project is a bit more ambitious than that one, but i think the groundwork i've already laid for myself will prove to be helpful even if it is not perfect. 
    
    I moved my next goals directly into the info.txt document to avoid extra clutter in this file.

    I also went ahead and made some fake data to help with loading initial state, amongst other operations, as i develop front end features. 
        This data is found in ./Frontend/frontend_dev_data.js 
        I'm hoping that this data will act as a framework for how the db will store and deliver data, but as i was creating the project and ticket and other data objects,
        i became a little worried about the actual logic of that process 
            Mostly im just worried it will be more complex than necessary causing confusion and headaches as i try to implement the db later on. 

1/9/2023:
    I think I made some decent head way today.
        I defined at least the start of every single .js page of my application, and got most of the logic operators needed for every slice of the state.
        I also sort of started working on getting components to display, so i can actually run the program now to start trouble shooting issues.
        I spent a while trying to trouble shoot why the data coming from the set i created was causing stack overflow errors, and i think it relates 
            mostly to the logic behind my selector for return filtered projects/tickets. I haven't looked at the tickets section yet, but it uses the same logic as projects 
            so once i get that figured out i just need to port the fix over to tickets. 

        My biggest struggle so far in trouble shooting is trying to exactly determine how to effectively load the data into each respective slice of state,
        and also what that data looks like in terms of retrieving it. I've started to get a grasp on it, but I think it will continue to be something perplexing.
        Using the redux dev tools tho seem to be a big help, as they can show me, in conjunction with console.logs, where exactly my code is going to shit. 

        Lastly, i'm a little worried about my organization already. I'm not sure if using the DataList.js file is the right place to do all the file sorting. On top of that,
        since UserPage, TicketPage, and ProjectPage aren't really being rendered, the calls to load their data aren't happening unless I render them when rendering the dataList page
            I think the solution to the second issue would be having a homepage file that would render whose express purpose is to load all data,
                Then i can focus on using ProjectPage and TicketPage for rendering their respective views for individual items, instead of having all data load in there. 

    So my goal for wednesday is to have the dataList page, the ProjectPage and TicketPage all fully functional, along with the NavBar to switch between the three. 
    Meaning my goal for tomorrow will be to get the dataList page working correctly, and then start working on the components for the Project and Ticket Pages 
    Then wednesday would be finishing the Project and Ticket pages and employing the navbar functionality.

1/10/23:
    Feeling incredibly unmotivated today, but in only about 40 minutes of work I've already fixed the display errors I was getting at the end of yesterday. 
    So, in theory I have the data list page working as intended, and even added functionality to switch between projects and tickets view when clicking on the nav bar items,
        but i'm worried that my functionality is a little hacky and may cause issues for trouble shooting down the line. 
    
    I still think it would be wise to make a separate class or whatever you want to call it that is primarily responsible for loading all the data on initial load
    but I also think this should be secondary to continuing to get functionality to pop off. I want to keep moving forward here instead of getting stunlocked in trying to refactor
    halfway through making the program. Halfway is even generous, but you know what i mean.
        The consequence of this, i recognize, will be having more plates to keep balanced when trying to refactor later, but isn't that just the way she goes. 

    I still don't have sorting really figured out in any sense, as i feel this will be a major challenge. But i'm thinking i'll just stick to the plan I wrote for myself yesterday
    and try to build the components for displaying a project's or ticket's information on their specific page. 
        It is just now occuring to me that i'm not really sure how i'm going to employ switching to that view. Something like clicking on the ticket/project name in the dataList row
        and then being redirected to the full page view of all their details/assignedUsers/comments etc.
        Maybe i will have to build another selector for projects and tickets that can grab the data from one based on that button click, and load it into the corresponding components
        while simultaenously updating the view state. 
            Truly the further i get into this, the more messy it all feels. 

    Big issue:
        When a user is assigned a ticket, how is that date value tracked to be re-rendered when viewing the tickets list of a project's page? should it just be the date the ticket
        was created? 
        because in theory, a user could be assigned to a ticket after it was created, but where is that date stored? 
        a ticket has an array of assigned users, but a user does not have an array of assigned tickets? should they? 
        and then when they are assigned a ticket, that is added to the DB? i'm getting lost in the weeds on this one
        and need to actually design my db framework to understand it i think? for now i'm just gonna put the 'date created' in there.

    Okay, so despite dragging my feet pretty hard today, i was still able to get all of the components for Ticket and Project pages working, along with the dataList pages
    to display correctly for the corresponding user id. 

    For tomorrow: I would like to get the nav bar functioning properly for sure, 
    other than that, I think it would be wise to
        1) circle back to dataList sorting 
        2) Work on beautifying the pages i have working so far
        3) Implementing functionality of loading a project/ticket page when clicking on their name from a dataList 
        4) Start thinking about how new projects/tickets/comments can be created and updated, and how users can be added to these things as well. 

1/11/23:
    I have again made decent progress in little time so far today.
    I was able to make the nav bar fully functional, along with making the names of projects/tickets clickable from dataList view to load their individual details.
        The way I went about this felt like i was doing it pretty messily, by having a function in my nice clean DataRow component to set the view state and assign the current
        ticket/project to the one that was clicked, but it works so I mean. I can always refactor later. 

    I"m not sure what i want to work on next. It would be probably wise to spend some time trying to make the way that pages are displayed actually somewhat readable instead
    of the messy jumble of text they currently are, but html and css are so puttsy that i'm kind of ok just pushing that part off for now. 

    The other things i need to still figure out this week are  
        1) for sure i need to start building functionality for adding new tickets/projects/comments etc. 
        2) Making the lists of dataList view actually sortable -- something i've been avoiding because i know i will likely butt heads with algorithmic sorting. 
            The reason i think this is mostly because of how messy my objects are, that just pulling out the value to sort by for each object seems daunting. Tho i'm probably  
            just making it a bigger deal than it actually is.

    either way, i'm pretty satisfied that i've been able to create this level of functionality in only a short amount of time. From having no code written monday morning to having
    what i do now feels very satisfying. 

    Okay, i decided to spend some time doing HTML/CSS stuff and i think it's payed off so far. I just sort of copied examples from the w3schools docs to make the data tables 
        actually look kind of nice. I still haven't approached the individual ticket/project pages, but maybe that's something I can work on this weekend or something. 

    My goals for tomorrow:
        1) Functionality for adding/updating new data. Even if i get nothing else done, having this working would be huge
        2) If i have time, it would be worthwhile to start working on data sorting algorithms. I made a new file dataSorting.js where these methods would be housed
            and even if i just started trying to get one type to work it would be a big step towards figuring out the rest. 

1/12/23:
    I actually got to work right away today, but unfortunately i have been struggling. 
    I"ve been working on getting updates to work, specifically only for the 'isAdmin' property of users. I was trying to think of a way to do it where the dataList table of 
    users could be a form that would only be updated to the server when a 'submit' button was pressed, but was having trouble seeing my changes reflected in the dom without
    immediately updating the 'isAdmin' flag in the state. 
    The reason i'm concerned aobut this is that i don't want the checkboxes for 'isAdmin' to be abused by spam clicking and effectively destroying the server. 
        I'm thinking that maybe clicking a checkbox could update the state directly, but not until a submit button is pressed would it actually be updated in the db? 
        The biggest issue i'm having with this is refactoring how a dataList data table is created to accomodate for being inside of a <form> tag. 
        Its mostly just that this is the only data table i have that needs to be a form, and so i don't want the other ones to have a random submit button. But at least for now,
        this does work so maybe i can just circle back to it later if I feel it needs to be changed.

        Anyways, in theory lets say i get the form thing sorted.
            When a checkbox is selected it could add that dataItem (user object) to an array within the dataRow component class (again, this is a gross place to have this but I knew
                the hackiness would arrise somewhere).
            Then onSubmit would call a function that analyzes the userObjects in the state to determine their current isAdmin value, but would only look at those with ids that had been
             added to the array.
            Or maybe 'analyzes' is not the right word. What it would really do is send the list of userObjects to the server to have their values updated to match what is currently 
                in the state at the point the 'submit' button is pressed. 
                By just sending all the objects that were touched, even if their final value isn't changed, i think it would be more efficient than digging through the allUsers 
                    slice of state and then making comparisons. 
                    In fact, i don't even know how I would make those comparisons without creating another temporary list of previous state or calling the server to verify. 
                        So i guess the efficiency is trading space for a temporary array and time for searching through the state and making comparisons for more transactions
                        to the data base. 

    The other major concern i'm having is where my server calls are going to live. 
        I don't really want them to be spread out all over the place, and i think it would be wise to keep them all in one file, but i'm not really sure how this would work.
        Maybe every call i need to make to a server is just a method that can be referenced with the appropriate data via arguments in the file that needs to call to the server,
        but the actual fetch's themselves would live in their own separate file. 
    
    But onwards and upwards. Next i need to make an input box with submission capability for the comments section of individual pages. 

    Well i did make it possible to add comments to a ticket or a project, but i can't get the view store to update it's current data object to match that what is in the store
    after a new comment is added. 
    I think this is probably because of how my viewSlice is initially fed currentTicket/currentProject by sending it a reference to an object via components/DataTable/DataRow 
    instead of having it grab that currentTicket from the state. 
    I set up infrastructure to do it like this with selectTicketById, but the reason i ended up doing it the way i did was to get data to load how i needed it to 
    when the view switches to a single ticket/project page.
        As in, from dataList view, how do you send the id of the ticket/project page's name that you clicked on so TicketPage/ProjectPage can load the data that they need? 
        The only way i could think of is by having a thisTicket and thisProject slice of state to manage those things, but instead i've kind of shoehorned that functionality
        into the view state.

    It's just weird that when you update the state of a user being an admin, it re-renders the whole user page data table to reflect the changes in the state.
    Okay i guess it's not weird, cause we're updating the contents of the state of the comments section, not updating its value. 

    I've just discovered that it almost works. It only updates the displayed state after you send a second comment. 
        so the comments are like: 
            initial state, display: [comment1, comment2]
            add comment 3:
            state: [comment1, comment2, comment3]
            display: [comment1, comment2]
            add comment 4:
            state: [comment1, comment2, comment3, comment4]
            display: [comment1, comment2, comment3]

        And i'm not sure why !

    Honestly, i'm also worried about clearing the form after the comment is submitted. It's so hard to find simple ways to do things when everyone is using different libraries.
    In react, people use react state to control the value of a text field as it is being updated, and then can clear it from an onSubmit function which gets the data from the state.
    In redux tk, i don't want to create an entire slice of state to handle this one simple input box, nor do i want to convalute the state of the application by layering on React
    states with the store i already have.
        Okay i just looked into it and using local state values to control things like form data seems to be fair game.

    I think what i need to do first, however, to start solving this issue is moving the comment input form into its own component.

    I could also just move on and come back to comments later. I still need to figure out components for 
        1) adding users to projects/tickets
        2) creating new projects/tickets
        3) updating project/ticket info
        It is nice to see i at least tried to help myself out in the past by writing reducer actions to handle these things. 
        Really what was just screwing me over today is the way in which redux sees the state being updated and how it re-renders components accordingly.